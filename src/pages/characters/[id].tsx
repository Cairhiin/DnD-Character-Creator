import Head from "next/head";
import { useRouter } from "next/router";
import { useCharacterStore } from "@/store";
import styles from "@/styles/Characters.module.scss";
import { useSession } from "next-auth/react";
import {
  calculateAbilityModifier,
  calculateArmorClass,
  calculateAttackBonus,
  calculateDamage,
  calculateMiscArmorBonus,
  calculateProfBonus,
  calculateSpeed,
} from "@/utils";
import { useState } from "react";
import { useFetchFeatureLevelData } from "@/hooks/useFetchFeatureLevelData";
import { Character, Item } from "@/types";
import { useFetchRaceProficiencies } from "@/hooks/useFetchRaceProficiencies";
import { GetServerSideProps } from "next";
import { ParsedUrlQuery } from "querystring";

interface Params extends ParsedUrlQuery {
  id: string;
}

interface Props {
  character: Character;
}

export default function character({
  character,
}: {
  character: Character;
}): JSX.Element {
  const router = useRouter();
  const { id } = router.query;
  const [isLoading, setLoading] = useState<boolean>(false);
  const [error, setError] = useState<string>("");

  const {
    race,
    dndClass,
    background,
    abilities,
    description,
    skills,
    hitpoints,
    equipment,
    spells,
    level,
    experience,
    gold,
  } = character;
  const { data: session, status } = useSession();
  const {
    featureData,
    isLoading: charLevelDataIsLoading,
    error: charLevelDataError,
  } = useFetchFeatureLevelData(dndClass, level);
  const {
    raceProficiencies,
    isLoading: raceProfIsLoading,
    error: raceProfError,
  } = useFetchRaceProficiencies(race);

  return (
    <>
      <Head>
        <title>D&D Character Creator | Character Sheet</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.characterSheet}>
        <div className={styles.characterSheet__intro}>
          <div>
            <h2>{description?.details.name}</h2>
          </div>
          <div className={styles.characterSheet__details}>
            <div>
              <div>
                <span>Class</span> {dndClass?.name} {level}
              </div>
              <div>
                <span>Background</span> {background?.name}
              </div>
            </div>
            <div>
              <div>
                <span>Race</span> {race?.name}
              </div>
              <div>
                <span>Alignment</span> {description?.details.alignment}
              </div>
            </div>
            <div>
              <div>
                <span>XP</span> {experience}
              </div>
              <div>
                <span>Player</span> {session?.user?.name}
              </div>
            </div>
          </div>
          {/* end of details */}
        </div>
        {/* end of intro */}
        <div className={styles.characterSheet__main}>
          <div className={styles.characterSheet__main__left}>
            <div className={styles.characterSheet__main__left__abilities}>
              {Object.entries(abilities!).map(
                ([key, value]): JSX.Element => (
                  <div key={key}>
                    <div>
                      <h3>{key}</h3>
                    </div>
                    <div
                      className={
                        styles.characterSheet__main__left__abilities__score
                      }
                    >
                      {value}
                    </div>
                    <div
                      className={
                        styles.characterSheet__main__left__abilities__mod
                      }
                    >
                      {calculateAbilityModifier(value)}
                    </div>
                  </div>
                )
              )}
            </div>{" "}
            {/* end of abilities column */}
            <div>
              <div>
                <div
                  className={`${styles.characterSheet__main__left__area} ${styles.box}`}
                >
                  <div>
                    <h3>Proficiency Bonus</h3>
                  </div>
                  <div
                    className={styles.characterSheet__main__left__area__prof}
                  >
                    +{calculateProfBonus(level)}
                  </div>
                </div>
                <div
                  className={`${styles.characterSheet__main__left__area} ${styles.box}`}
                >
                  <div>
                    <h3>Saving Throws</h3>
                  </div>
                  <div>
                    {Object.entries(abilities!).map(
                      ([key, value]): JSX.Element => (
                        <div
                          key={key}
                          className={styles.characterSheet__main__left__flex}
                        >
                          {dndClass?.proficiencies?.filter(
                            (prof: any): boolean =>
                              prof.name.substring(14) === key
                          )?.length ? (
                            <div className={styles.filledDot}></div>
                          ) : (
                            <div className={styles.dot}></div>
                          )}
                          <div>{key}</div>
                          <div>
                            {dndClass?.proficiencies?.filter(
                              (prof: any): boolean =>
                                prof.name.substring(14) === key
                            )?.length
                              ? calculateAbilityModifier(value) +
                                calculateProfBonus(level)
                              : calculateAbilityModifier(value)}
                          </div>
                        </div>
                      )
                    )}
                  </div>
                </div>
                <div
                  className={`${styles.characterSheet__main__left__area} ${styles.box}`}
                >
                  <div>
                    <h3>Skills</h3>
                  </div>
                  <div>
                    {Object.entries(skills).map(
                      ([key, { name, value, modifier }]): JSX.Element => (
                        <div
                          key={key}
                          className={styles.characterSheet__main__left__flex}
                        >
                          {value ? (
                            <div className={styles.filledDot}></div>
                          ) : (
                            <div className={styles.dot}></div>
                          )}
                          <div>{name}</div>
                          <div>
                            {value
                              ? calculateProfBonus(level) +
                                calculateAbilityModifier(
                                  (abilities as any)[modifier]
                                )
                              : calculateAbilityModifier(
                                  (abilities as any)[modifier]
                                )}
                          </div>
                        </div>
                      )
                    )}
                  </div>
                </div>
              </div>
            </div>
            {/* end of skills column */}
          </div>
          <div className={styles.characterSheet__main__right}>
            <div className={styles.characterSheet__main__right__gridRow}>
              <div>
                <div>
                  <h3>Spellcasting Ability</h3>
                </div>
                <div>
                  {dndClass?.spellcasting?.spellcasting_ability.name ? (
                    calculateAbilityModifier(
                      (abilities as any)[
                        dndClass?.spellcasting?.spellcasting_ability.name
                      ]
                    )
                  ) : (
                    <span>-</span>
                  )}
                  {dndClass?.spellcasting?.spellcasting_ability.name && (
                    <span>
                      {" "}
                      ({dndClass.spellcasting?.spellcasting_ability.name})
                    </span>
                  )}
                </div>
              </div>
              <div>
                <div>
                  <h3>Spell Save DC</h3>
                </div>
                <div>
                  {dndClass?.spellcasting?.spellcasting_ability.name ? (
                    8 +
                    calculateAbilityModifier(
                      (abilities as any)[
                        dndClass.spellcasting?.spellcasting_ability.name
                      ]
                    ) +
                    calculateProfBonus(level)
                  ) : (
                    <span>-</span>
                  )}
                </div>
              </div>
              <div>
                <div>
                  <h3>Spell Attack Bonus</h3>
                </div>
                <div>
                  {dndClass?.spellcasting?.spellcasting_ability.name ? (
                    calculateAbilityModifier(
                      (abilities as any)[
                        dndClass.spellcasting?.spellcasting_ability.name
                      ]
                    ) + calculateProfBonus(level)
                  ) : (
                    <span>-</span>
                  )}
                </div>
              </div>
            </div>
            <div className={styles.characterSheet__main__right__armorRow}>
              <div>
                <div>
                  {calculateArmorClass(
                    dndClass?.index!,
                    abilities,
                    equipment.armors[0]?.armor_class?.base || 0,
                    equipment.shields[0]?.armor_class?.base || 0
                  )}
                </div>
                <div>
                  <h3>AC</h3>
                </div>
              </div>
              <div>
                <div>{calculateAbilityModifier(abilities.DEX!)}</div>
                <div>
                  <h3>Dex Mod</h3>
                </div>
              </div>
              <div>
                <div>{equipment.armors[0]?.armor_class?.base || 10}</div>
                <div>
                  <h3>Armor</h3>
                </div>
              </div>
              <div>
                <div>{equipment.shields[0]?.armor_class?.base || 0}</div>
                <div>
                  <h3>Shield</h3>
                </div>
              </div>
              <div>
                <div>
                  {calculateMiscArmorBonus(dndClass?.index!, abilities)}
                </div>
                <div>
                  <h3>Misc</h3>
                </div>
              </div>
              <div>
                <div>{calculateAbilityModifier(abilities.DEX!)}</div>
                <div>
                  <h3>Initiative</h3>
                </div>
              </div>
              <div>
                <div>
                  {calculateSpeed(
                    abilities.STR,
                    equipment.armors[0],
                    race?.speed
                  )}
                </div>
                <div>
                  <h3>Speed</h3>
                </div>
              </div>
            </div>
            <div className={styles.characterSheet__main__right__grid}>
              <div className={styles.characterSheet__main__right__grid__HP}>
                <div className={styles.box}>
                  <div>
                    <h3>Max HP</h3>
                  </div>
                  <div>{hitpoints}</div>
                </div>
                <div className={styles.box}>
                  <div>
                    <h3>Hit Die</h3>
                  </div>
                  <div>{dndClass?.hit_die || 0}</div>
                </div>
              </div>
              <div
                className={`${styles.characterSheet__main__right__grid__weapons} ${styles.box}`}
              >
                <h3>Weapons</h3>
                {equipment.weapons.map((weapon: Item): JSX.Element => {
                  return (
                    <div key={weapon.index}>
                      <div className={styles.flex}>
                        <div>
                          <span>Name </span>
                          {weapon.name}
                        </div>
                        <div>
                          <span>Type </span>
                          {weapon.damage?.damage_type.name}
                        </div>
                      </div>
                      <div className={styles.flex}>
                        <div>
                          <span>Range </span>
                          {weapon.range?.normal}{" "}
                        </div>
                        <div>
                          <span>Attack </span>
                          {calculateAttackBonus(
                            weapon,
                            abilities,
                            level,
                            dndClass!,
                            raceProficiencies
                          ) >= 0 && "+"}
                          {calculateAttackBonus(
                            weapon,
                            abilities,
                            level,
                            dndClass!,
                            raceProficiencies
                          )}
                        </div>
                        <div>
                          <span>Damage </span>
                          {weapon.damage?.damage_dice}
                          {calculateDamage(weapon, abilities) >= 0 && "+"}
                          {calculateDamage(weapon, abilities)}
                        </div>
                      </div>
                    </div>
                  );
                })}
              </div>
              <div
                className={`${styles.characterSheet__main__right__grid__features} ${styles.box}`}
              >
                <div>
                  <h3>Features</h3>
                </div>
                <div>
                  {featureData?.map(
                    (feature: any): JSX.Element => (
                      <div key={feature.name}>{feature.name}</div>
                    )
                  )}
                </div>
              </div>
            </div>
          </div>
          <div></div>
        </div>

        <div>
          {10 +
            calculateAbilityModifier(abilities.WIS) +
            (skills?.perception.value ? calculateProfBonus(level) : 0)}{" "}
          <h3>Passive Wisdom (Perception)</h3>
        </div>
        <div>
          <h3>Proficiencies</h3>
        </div>
        <div>
          <h3>Languages</h3>
        </div>
      </main>
    </>
  );
}

export const getServerSideProps: GetServerSideProps<Props, Params> = async ({
  params,
}) => {
  const { id } = params!;
  const character = await fetch(`http://localhost:3001/api/characters/${id}`);
  const { results } = await character.json();
  return {
    props: {
      character: results,
    },
  };
};
