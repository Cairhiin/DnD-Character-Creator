import Head from "next/head";
import { useCharacterStore } from "@/store";
import styles from "@/styles/Character.module.scss";
import { useSession } from "next-auth/react";
import {
  calculateAbilityModifier,
  calculateArmorClass,
  calculateAttackBonus,
  calculateDamage,
  calculateMiscArmorBonus,
  calculateProfBonus,
  calculateSpeed,
} from "@/utils";
import { useState } from "react";
import { useFetchFeatureLevelData } from "@/hooks/useFetchFeatureLevelData";
import { Item } from "@/types";
import { useFetchRaceProficiencies } from "@/hooks/useFetchRaceProficiencies";

export default function CharacterSheet(): JSX.Element {
  const [isLoading, setLoading] = useState<boolean>(false);
  const [error, setError] = useState<string>("");
  const race = useCharacterStore((state) => state.race);
  const dndClass = useCharacterStore((state) => state.dndClass);
  const abilities = useCharacterStore((state) => state.abilityScores);
  const background = useCharacterStore((state) => state.background);
  const description = useCharacterStore((state) => state.description);
  const skills = useCharacterStore((state) => state.skills);
  const { armors, weapons, misc, shields } = useCharacterStore(
    (state) => state.equipment
  );
  const hitpoints = useCharacterStore((state) => state.hitpoints);
  const spells = useCharacterStore((state) => state.spells);
  const level = useCharacterStore((state) => state.level);
  const experience = useCharacterStore((state) => state.experience);
  const gold = useCharacterStore((state) => state.gold);
  const { data: session, status } = useSession();
  const {
    featureData,
    isLoading: charLevelDataIsLoading,
    error: charLevelDataError,
  } = useFetchFeatureLevelData(dndClass, level);
  const {
    raceProficiencies,
    isLoading: raceProfIsLoading,
    error: raceProfError,
  } = useFetchRaceProficiencies(race);

  return (
    <>
      <Head>
        <title>D&D Character Creator | Character Sheet</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.characterSheet}>
        <div className={styles.characterSheet__intro}>
          <div>
            <h2>{description.details.name}</h2>
          </div>
          <div className={styles.characterSheet__details}>
            <div>
              <div>
                {dndClass.name}
                <span>{level}</span>
              </div>
              <div>{background.name}</div>
            </div>
            <div>
              <div>{race.name}</div>
              <div>{description.details.alignment}</div>
            </div>
            <div>
              <div>{session?.user?.name}</div>
              <div>{experience}</div>
            </div>
          </div>
          {/* end of details */}
        </div>
        {/* end of intro */}
        <div className={styles.characterSheet__main}>
          <div className={styles.characterSheet__main__left}>
            <div>
              {Object.entries(abilities).map(
                ([key, value]): JSX.Element => (
                  <div key={key}>
                    <div>{key}</div>
                    <div>{value}</div>
                  </div>
                )
              )}
            </div>{" "}
            {/* end of abilities column */}
            <div>
              <div>
                <div className={styles.characterSheet__main__left__area}>
                  <div>Proficiency Bonus</div>
                  <div>{calculateProfBonus(level)}</div>
                </div>
                <div className={styles.characterSheet__main__left__area}>
                  <div>Saving Throws</div>
                  <div>
                    {Object.entries(abilities).map(
                      ([key, value]): JSX.Element => (
                        <div
                          key={key}
                          className={styles.characterSheet__main__left__flex}
                        >
                          {dndClass.proficiencies?.filter(
                            (prof: any): boolean =>
                              prof.name.substring(14) === key
                          )?.length ? (
                            <div className={styles.filledDot}></div>
                          ) : (
                            <div className={styles.dot}></div>
                          )}
                          <div>{key}</div>
                          <div>
                            {dndClass.proficiencies?.filter(
                              (prof: any): boolean =>
                                prof.name.substring(14) === key
                            )?.length
                              ? calculateAbilityModifier(value) +
                                calculateProfBonus(level)
                              : calculateAbilityModifier(value)}
                          </div>
                        </div>
                      )
                    )}
                  </div>
                </div>
                <div className={styles.characterSheet__main__left__area}>
                  <div>Skills</div>
                  <div>
                    {Object.entries(skills).map(
                      ([key, { name, value, modifier }]): JSX.Element => (
                        <div
                          key={key}
                          className={styles.characterSheet__main__left__flex}
                        >
                          {value ? (
                            <div className={styles.filledDot}></div>
                          ) : (
                            <div className={styles.dot}></div>
                          )}
                          <div>{name}</div>
                          <div>
                            {value
                              ? calculateProfBonus(level) +
                                calculateAbilityModifier(
                                  (abilities as any)[modifier]
                                )
                              : calculateAbilityModifier(
                                  (abilities as any)[modifier]
                                )}
                          </div>
                        </div>
                      )
                    )}
                  </div>
                </div>
              </div>
            </div>
            {/* end of skills column */}
          </div>
          <div className={styles.characterSheet__main__right}>
            <div>
              <div>
                <div>Spellcasting Ability</div>
                <div>
                  {dndClass.spellcasting?.spellcasting_ability.name ? (
                    calculateAbilityModifier(
                      (abilities as any)[
                        dndClass.spellcasting?.spellcasting_ability.name
                      ]
                    )
                  ) : (
                    <span>-</span>
                  )}
                  {dndClass.spellcasting?.spellcasting_ability.name && (
                    <span>
                      {" "}
                      ({dndClass.spellcasting?.spellcasting_ability.name})
                    </span>
                  )}
                </div>
              </div>
              <div>
                <div>Spell Save DC</div>
                <div>
                  {dndClass.spellcasting?.spellcasting_ability.name ? (
                    8 +
                    calculateAbilityModifier(
                      (abilities as any)[
                        dndClass.spellcasting?.spellcasting_ability.name
                      ]
                    ) +
                    calculateProfBonus(level)
                  ) : (
                    <span>-</span>
                  )}
                </div>
              </div>
              <div>
                <div>Spell Attack Bonus</div>
                <div>
                  {dndClass.spellcasting?.spellcasting_ability.name ? (
                    calculateAbilityModifier(
                      (abilities as any)[
                        dndClass.spellcasting?.spellcasting_ability.name
                      ]
                    ) + calculateProfBonus(level)
                  ) : (
                    <span>-</span>
                  )}
                </div>
              </div>
            </div>
            <div>
              <div>
                <div>
                  {calculateArmorClass(
                    dndClass.index,
                    abilities,
                    armors[0]?.armor_class?.base || 0,
                    shields[0]?.armor_class?.base || 0
                  )}
                </div>
                <div>Armor Class</div>
              </div>
              <div>
                <div>{calculateAbilityModifier(abilities.DEX)}</div>
                <div>Dex Mod</div>
              </div>
              <div>
                <div>{armors[0]?.armor_class?.base}</div>
                <div>Armor</div>
              </div>
              <div>
                <div>{shields[0]?.armor_class?.base}</div>
                <div>Shield</div>
              </div>
              <div>
                <div>{calculateMiscArmorBonus(dndClass.index, abilities)}</div>
                <div>Misc</div>
              </div>
              <div>
                <div>{calculateAbilityModifier(abilities.DEX)}</div>
                <div>Initiative</div>
              </div>
              <div>
                <div>
                  {calculateSpeed(abilities.STR, armors[0], race.speed)}
                </div>
                <div>Speed</div>
              </div>
            </div>
            <div className={styles.characterSheet__main__right__features}>
              <div className={styles.flex}>
                <div className={styles.flex}>
                  <div>
                    <div>Max HP</div>
                    <div>{hitpoints}</div>
                  </div>
                  <div>
                    <div>Hit Die</div>
                    <div>{dndClass.hit_die}</div>
                  </div>
                </div>
                <div>
                  <div>Features</div>
                  <div>
                    {featureData?.map(
                      (feature: any): JSX.Element => (
                        <div>{feature.name}</div>
                      )
                    )}
                  </div>
                </div>
              </div>
            </div>
            <div>
              <div>
                {weapons.map((weapon: Item): JSX.Element => {
                  return (
                    <div>
                      <div>
                        {weapon.name}{" "}
                        <span>{weapon.damage?.damage_type.name}</span>
                      </div>
                      <div>
                        {weapon.range?.normal}{" "}
                        <span>
                          {calculateAttackBonus(
                            weapon,
                            abilities,
                            level,
                            dndClass,
                            raceProficiencies
                          )}
                        </span>{" "}
                        <span>
                          {weapon.damage?.damage_dice}
                          {calculateDamage(weapon, abilities) >= 0 && "+"}
                          {calculateDamage(weapon, abilities)}
                        </span>
                      </div>
                    </div>
                  );
                })}
              </div>
            </div>
          </div>
        </div>

        <div>
          {10 +
            calculateAbilityModifier(abilities.WIS) +
            (skills.perception.value ? calculateProfBonus(level) : 0)}{" "}
          Passive Wisdom (Perception)
        </div>
      </main>
    </>
  );
}
